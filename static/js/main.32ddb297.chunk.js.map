{"version":3,"sources":["Components/Home.js","Components/MenuPanel.js","Components/ContactForm.js","Components/Login.js","Components/HowItWorks.js","App.js","serviceWorker.js","index.js"],"names":["Home","id","TextInput","name","placeholder","Button","React","Component","MenuPanel","props","state","selectedIndex","tabs","initialState","tabName","HomeComponent","ContactComponent","HowItWorksComponent","LoginComponent","Tablist","marginBottom","flexBasis","marginRight","this","map","tab","index","Tab","key","onSelect","setState","isSelected","aria-controls","Pane","padding","flex","role","aria-labelledby","aria-hidden","display","conditionalRender","ContactForm","message","required","className","Textarea","onChange","event","target","value","validationMessage","Login","type","HowItWorks","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.32ddb297.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, TextInput } from 'evergreen-ui'\nimport '../CSSFiles/Home.css';\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <div id=\"catalogInformational\">\n                <h1 id=\"catalogHeader\">Catalog</h1>\n                <h2 id=\"catalogTagline\">Advertise your fashion ecommerce.</h2>\n                <TextInput id=\"signupEmailForm\" name=\"Email\" placeholder=\"Email\" /> <Button>Sign up</Button>\n            </div>\n        )\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport { Pane, Tablist, Tab } from 'evergreen-ui'\n\n\nclass MenuPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedIndex: 0,\n            tabs: this.props.initialState.tabs\n        }\n    }\n\n    conditionalRender(tabName) {\n        if (tabName === \"Home\") {\n            return <this.props.HomeComponent />\n        } else if (tabName === \"Contact\") {\n            return <this.props.ContactComponent />\n        } else if (tabName === \"How it Works\") {\n            return <this.props.HowItWorksComponent />\n        } else if (tabName === \"Login\") {\n            return <this.props.LoginComponent />\n        } else {\n            return <this.props.HomeComponent />\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <pane>\n                    <Tablist marginBottom={16} flexBasis={240} marginRight={24}>\n                        {this.state.tabs.map((tab, index) => (\n                        <Tab\n                            key={tab}\n                            id={tab}\n                            onSelect={() => this.setState({ selectedIndex: index })}\n                            isSelected={index === this.state.selectedIndex}\n                            aria-controls={`panel-${tab}`}\n                        >\n                            {tab}\n                        </Tab>\n                        ))}\n                    </Tablist>\n                    <Pane padding={16} flex=\"1\">\n                        {this.state.tabs.map((tab, index) => (\n                        <Pane\n                            key={tab}\n                            id={`panel-${tab}`}\n                            role=\"tabpanel\"\n                            aria-labelledby={tab}\n                            aria-hidden={index !== this.state.selectedIndex}\n                            display={index === this.state.selectedIndex ? 'block' : 'none'}\n                        >\n                           { this.conditionalRender(tab) }\n                        </Pane>\n                        ))}\n                    </Pane>\n                </pane>\n            </div>\n        )\n    }\n}\nexport default MenuPanel;\n","import React from 'react'\nimport { Button, TextInput, Textarea } from 'evergreen-ui'\nimport '../CSSFiles/ContactForm.css';\n\n\nclass ContactForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            message: \"\",\n        }\n    }\n\n    render() {\n        return  (\n            <div id=\"ContactFormPage\"> \n                <TextInput id=\"contactFormEmailInput\" name=\"email\" placeholder=\"Email\"  required={true} />\n                <div className=\"divider\"></div>\n                <Textarea id=\"contactFormText\"\n                    placeholder=\"Contact us\"\n                    onChange={event => this.setState({\n                        message: event.target.value\n                    })}\n                    required\n                    validationMessage=\"This field is required\"\n                />\n                <div className=\"divider\"></div>\n                <Button id=\"submissionButton\">Submit</Button>\n            </div>\n        )\n    }\n}\n\nexport default ContactForm\n","import React from 'react'\nimport { Button, TextInput } from 'evergreen-ui'\nimport '../CSSFiles/Login.css';\n\nclass Login extends React.Component {\n    render() {\n        return (\n            <div id=\"LoginFormPage\">\n                <TextInput type=\"default\" placeholder=\"username\" id=\"usernameField\" />\n                <div id=\"divider\" />\n                <TextInput type=\"password\" placeholder=\"password\" />\n                <div id=\"divider\" />\n                <Button>Log In</Button>\n            </div>\n        )\n    }\n}\n\nexport default Login;","import React from 'react'\nimport '../CSSFiles/HowItWorks.css';\nimport { Pane, Switch } from 'evergreen-ui';\n\nclass HowItWorks extends React.Component {\n    render() {\n        return (\n            <div id=\"pricingCalculatorElements\">\n                <h1>Video showing how it works.</h1>\n                <h1 id=\"pricingHeader\">\n                    Pricing Calculator.\n                </h1>\n                <p>make pricing easy by creating a quick description, a scroll bar, and some selection options</p>\n                <p>Use:</p>\n                <ol>\n                    <li>Checkbox</li>\n                    <li>Switch</li>\n                    <li>scroll bar thing to show increasing numbers</li>\n                    <li>segmented control</li>\n                    <li>Radio</li>\n                </ol>\n                <p>Provide a simple way to just let customers choose their pricing scheme</p>\n            </div>\n        )\n    }\n}\n\nexport default HowItWorks\n","import React from 'react';\nimport Home from './Components/Home';\nimport MenuPanel from './Components/MenuPanel';\nimport ContactForm from './Components/ContactForm';\nimport Login  from './Components/Login';\nimport HowItWorks from './Components/HowItWorks'\nimport './CSSFiles/App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <MenuPanel \n        initialState=\n          {{\n            selectedIndex: 0,\n            tabs: ['Home', 'Contact', 'How it Works', \"Login\"]\n          }}\n        HomeComponent={Home} \n        ContactComponent={ContactForm}\n        HowItWorksComponent={HowItWorks} \n        LoginComponent={Login}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}